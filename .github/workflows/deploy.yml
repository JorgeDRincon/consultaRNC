name: Deploy to Production

on:
  workflow_run:
    workflows: ["Code Quality Check"]
    branches: [ master ]
    types: 
      - completed
  workflow_dispatch:

jobs:
  quick-verify:
    name: Quick Verification
    runs-on: ubuntu-latest
    # Only run if the Code Quality Check workflow completed successfully
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install PHP dependencies
      run: composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist
    
    - name: Copy environment file
      run: cp .env.example .env
    
    - name: Generate app key
      run: php artisan key:generate
    
    - name: Install Node dependencies
      run: npm ci
    
    - name: Build assets
      run: npm run build
    
    - name: Cache config
      run: php artisan config:cache
    
    - name: Run critical smoke tests
      run: |
        php artisan test --filter="SmokeTest" --stop-on-failure || echo "No smoke tests found, continuing..."
        php artisan route:list > /dev/null
        echo "‚úÖ Application builds and routes load successfully"

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: quick-verify
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install PHP dependencies
      run: composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist
    
    - name: Install Node dependencies
      run: npm ci
    
    - name: Build production assets
      run: npm run build
    
    - name: Create deployment archive
      run: |
        mkdir -p deployment
        rsync -av --exclude-from='.deployignore' . deployment/
        tar -czf deployment.tar.gz -C deployment .
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
    
    - name: Upload deployment package
      run: |
        scp deployment.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/
        scp deployment-scripts/deploy.sh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/
        scp deployment-scripts/health-check.sh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/
        scp deployment-scripts/rollback.sh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/
    
    - name: Execute deployment
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
          export LC_ALL=C
          chmod +x /tmp/deploy.sh /tmp/health-check.sh /tmp/rollback.sh
          ls -la /tmp/deploy.sh
          bash /tmp/deploy.sh
        "
    
    - name: Health check
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "bash /tmp/health-check.sh"
    
    - name: Cleanup temporary files
      if: always()
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
          rm -f /tmp/deployment.tar.gz /tmp/deploy.sh /tmp/health-check.sh /tmp/rollback.sh
        "

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [quick-verify, deploy]
    # Always notify the deployment result if quality check passed (success or failure)
    if: needs.quick-verify.result != 'skipped'
    
    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "üöÄ Deployment successful!"
        echo "‚úÖ Application deployed to production"
        echo "üîó URL: https://consultarnc.com.do"
    
    - name: Notify Failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "üîÑ Automatic rollback should have been triggered"
        echo "üìß Check logs and consider manual intervention"
        exit 1
